#!/bin/bash

# Copyright (C) 2006 OpenWrt.org
# Copyright 2022-2025 sirpdboy <herboy2008@gmail.com>

crrun=$1
crid=$2
NAME=timecontrol


echolog() {
    local d="$(date "+%Y-%m-%d %H:%M:%S")"
    echo -e "$d: $*" >>$LOG_FILE
}

config_get_type() {
    local ret=$(uci -q get "${NAME}.${1}" 2>/dev/null)
    echo "${ret:=$2}"
}

config_n_get() {
    local ret=$(uci -q get "${NAME}.${1}.${2}" 2>/dev/null)
    echo "${ret:=$3}"
}

config_t_get() {
    local index=${3:-0} 
    local default=$4 
    local ret=$(uci -q get "${NAME}.@${1}[${index}].${2}")
    echo "${ret:-$default}" 
}

config_t_set() {
    local index=${3:-0}
    local ret=$(uci -q set "${NAME}.@${1}[${index}].${2}=${3}" 2>/dev/null)
}
get_target_info() {
    local target=$1

    # IPv4地址
    if echo "$target" | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
        # 验证每个octet是否<=255
        local octets=(${target//./ })
        for octet in "${octets[@]}"; do
            [ "$octet" -le 255 ] || return 1
        done
        table="ip"
        addr_type="ipv4_addr"
    
    # IPv4范围 (192.168.1.10-192.168.1.100)
    elif echo "$target" | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}-([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
        # 验证范围格式是否正确
        local start_ip=${target%-*}
        local end_ip=${target#*-}
        table="ip"
        addr_type="ipv4_addr"
        target="{ $target }"
    
    # IPv4 CIDR (192.168.1.0/24)
    elif echo "$target" | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'; then
        local ip=${target%/*}
        local mask=${target#*/}
        [ "$mask" -le 32 ] || return 1
        table="ip"
        addr_type="ipv4_addr"
    
    # MAC地址
    elif echo "$target" | grep -qE '^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$'; then
        table="bridge"
        addr_type="ether_addr"
    
    # IPv6地址
    elif echo "$target" | grep -qE '^([0-9a-fA-F]{0,4}:){2,7}[0-9a-fA-F]{0,4}(/[0-9]{1,3})?$'; then
        table="ip6"
        addr_type="ipv6_addr"
    else
        return 1
    fi

    echo "$table $addr_type $target"
}


stop_timecontrol() {
    # 只清理我们创建的规则
    [ -n "$nftables_ver" ] && {
        # 删除nftables规则
        nft delete table inet fw4 2>/dev/null
        echolog "Deleted nftables rules"
    }

    [ -n "$iptables_ver" ] && {
        # 删除iptables规则
        iptables -D INPUT -m set --match-set timecontrol_blacklist src -j DROP 2>/dev/null
        ip6tables -D INPUT -m set --match-set timecontrol_blacklistv6 src -j DROP 2>/dev/null
        
        # 清空并删除ipset集合
        ipset flush timecontrol_blacklist 2>/dev/null
        ipset flush timecontrol_blacklistv6 2>/dev/null
        ipset destroy timecontrol_blacklist 2>/dev/null
        ipset destroy timecontrol_blacklistv6 2>/dev/null
        
        echolog "Deleted iptables rules and ipsets"
    }
    
    echo "" > "$IDLIST"
    echolog "Time control stopped"
}
init_timecontrol() {
    # 确定使用哪种防火墙后端
    if [ -n "$nftables_ver" ]; then
        # 初始化nftables
        if ! nft list table inet fw4 >/dev/null 2>&1; then
            nft add table inet fw4
        fi
        
        # 创建支持各种类型的集合
        nft add set inet fw4 timecontrol_blacklist { type ipv4_addr\; flags interval\; }
        nft add set inet fw4 timecontrol_blacklistv6 { type ipv6_addr\; flags interval\; }
        nft add set inet fw4 timecontrol_blacklistbridge { type ether_addr\; }
        
        # 添加规则
        nft add chain inet fw4 timecontrol_input { type filter hook input priority 0\; }
        nft add rule inet fw4 timecontrol_input ip saddr @timecontrol_blacklist counter drop
        nft add rule inet fw4 timecontrol_input ip6 saddr @timecontrol_blacklistv6 counter drop
        nft add rule inet fw4 timecontrol_input ether saddr @timecontrol_blacklistbridge counter drop
        
        echolog "Initialized nftables rules with interval support"
    elif [ -n "$iptables_ver" ]; then
        # 初始化iptables和ipset
        ipset create timecontrol_blacklist hash:net 2>/dev/null || ipset flush timecontrol_blacklist
        ipset create timecontrol_blacklistv6 hash:net family inet6 2>/dev/null || ipset flush timecontrol_blacklistv6
        # 为IP范围创建额外的ipset
        ipset create timecontrol_range hash:ip --range 192.168.0.0-192.168.255.255 2>/dev/null || ipset flush timecontrol_range
        
        iptables -C INPUT -m set --match-set timecontrol_blacklist src -j DROP 2>/dev/null || \
        iptables -I INPUT -m set --match-set timecontrol_blacklist src -j DROP
        
        iptables -C INPUT -m set --match-set timecontrol_range src -j DROP 2>/dev/null || \
        iptables -I INPUT -m set --match-set timecontrol_range src -j DROP
        
        ip6tables -C INPUT -m set --match-set timecontrol_blacklistv6 src -j DROP 2>/dev/null || \
        ip6tables -I INPUT -m set --match-set timecontrol_blacklistv6 src -j DROP
        
        echolog "Initialized iptables rules and ipsets with range support"
    else
        echolog "Error: No supported firewall backend found (nftables or iptables)"
        exit 1
    fi
}

# 改进的时间比较函数
compare_times() {
    local time1=$(date -d "$1" +%s)
    local time2=$(date -d "$2" +%s)
    echo $((time1 - time2))
}
timeadd() {
    local id=$1
    local target=$(config_t_get device mac $id)
    [ -z "$target" ] && return
    
    local target_info=$(get_target_info "$target")
    [ $? -ne 0 ] && {
        echolog "Invalid target format: $target"
        return
    }
    
    read -r table addr_type target <<< "$target_info"
    
    case $table in
        ip) ipset_name="timecontrol_blacklist" ;;
        ip6) ipset_name="timecontrol_blacklistv6" ;;
        bridge) ipset_name="timecontrol_blacklistbridge" ;;
        *) return ;;
    esac
    
    if [ -n "$nftables_ver" ]; then
        # 检查是否已存在
        if ! nft list set inet fw4 $ipset_name | grep -q "\"$target\""; then
            nft add element inet fw4 $ipset_name { $target }
            echolog "Added $target to $ipset_name (nftables)"
        fi
    elif [ -n "$iptables_ver" ]; then
        # 对于IP范围，需要特殊处理
        if [[ "$target" == *-* ]]; then
            local range_name="${ipset_name}_range"
            if ! ipset list $range_name >/dev/null 2>&1; then
                ipset create $range_name hash:ip --range 192.168.0.0-192.168.255.255
            fi
            ipset add $range_name $target
        else
            ipset add $ipset_name $target
        fi
        echolog "Added $target to $ipset_name (iptables)"
    fi
}

timedel() {
    local id=$1
    local target=$(config_t_get device mac $id)
    [ -z "$target" ] && return
    
    local target_info=$(get_target_info "$target")
    [ $? -ne 0 ] && return
    
    read -r table addr_type target <<< "$target_info"
    
    case $table in
        ip) ipset_name="timecontrol_blacklist" ;;
        ip6) ipset_name="timecontrol_blacklistv6" ;;
        bridge) ipset_name="timecontrol_blacklistbridge" ;;
        *) return ;;
    esac
    
    if [ -n "$nftables_ver" ]; then
        nft delete element inet fw4 $ipset_name { $target } 2>/dev/null
    elif [ -n "$iptables_ver" ]; then
        # 对于IP范围，尝试从两种ipset中删除
        ipset del $ipset_name "$target" 2>/dev/null
        ipset del "${ipset_name}_range" "$target" 2>/dev/null
    fi
    
    echolog "Removed $target from $ipset_name"
}


check_list() {
    local i=$1
    local start_time=$(config_t_get device timestart $i)
    local end_time=$(config_t_get device timeend $i)
    local wweek=$(config_t_get device week $i )
    local current_time=$(date +%H:%M)
    local current_weekday=$(date +%u)
    
    # 检查星期
    local checkid=0
    if [ "$wweek" = "0" ]; then
        checkid=1
    else
    for ww in $(echo "$wweek" | sed 's/,/ /g'); do
            if [ "$current_weekday" = "$ww" ]; then
                checkid=1
                break
            fi
        done
    fi
    
    [ "$checkid" = "0" ] && return 1
    
    # 检查时间范围
    if [ "$start_time" = "$end_time" ]; then
        # 全天
        return 0
    fi
    
    # 使用改进的时间比较方法
    local start_sec=$(date -d "$start_time" +%s 2>/dev/null)
    local end_sec=$(date -d "$end_time" +%s 2>/dev/null)
    local current_sec=$(date -d "$current_time" +%s 2>/dev/null)
    
    if [ -z "$start_sec" ] || [ -z "$end_sec" ] || [ -z "$current_sec" ]; then
        echolog "Invalid time format: start=$start_time, end=$end_time, current=$current_time"
        return 1
    fi
    
    if [ "$start_sec" -lt "$end_sec" ]; then
        # 正常时间范围
        [ "$current_sec" -ge "$start_sec" ] && [ "$current_sec" -le "$end_sec" ] && return 0
    else
        # 跨午夜时间范围
        [ "$current_sec" -ge "$start_sec" ] || [ "$current_sec" -le "$end_sec" ] && return 0
    fi
    
    return 1
}

IDLIST="/var/$NAME.idlist"
TMPID="/var/$NAME.tmpid"
LOG_FILE="/var/log/$NAME.log"
list_type=$(config_t_get $NAME list_type)
CHAIN="TIME_CONTROL"
DEBUG=1
# 检测防火墙后端
bin_nft=$(which nft 2>/dev/null)
bin_iptables=$(which iptables 2>/dev/null)
bin_ip6tables=$(which ip6tables 2>/dev/null)

if [ -x "$bin_nft" ] && [ -x /sbin/fw4 ]; then
    nftables_ver="true"
elif [ -x "$bin_iptables" ] || [ -x "$bin_ip6tables" ]; then
    iptables_ver="true"
else
    echolog "Error: No supported firewall backend found (nftables or iptables)"
    exit 1
fi
dbg_nft() {
    [ "${DEBUG:-0}" -eq 0 ] || echolog "DEBUG: nft $*"
    $bin_nft "$@"
}

dbg_iptables() {
    [ "${DEBUG:-0}" -eq 0 ] || echolog "DEBUG: iptables $*"
    $bin_iptables "$@"
}

dbg_ip6tables() {
    [ "${DEBUG:-0}" -eq 0 ] || echolog "DEBUG: ip6tables $*"
    $bin_ip6tables "$@"
}
case "$crrun" in
    "stop")
        stop_timecontrol
        ;;
    "start")
        # 获取所有启用的设备ID
        idlist=$(uci show $NAME | grep "enable='1'" | grep "device" | grep -oE '\[.*?\]' | grep -o '[0-9]' | sed -e 's/^/!/g' -e 's/$/!/g' > "$IDLIST"; cat "$IDLIST" | sed -e 's/!//g')
        

        stop_timecontrol
        init_timecontrol
        
        # 处理每个设备
        for list in $(echo "$idlist" | sed -e 's/!//g'); do
            if check_list "$list"; then
                timeadd "$list"
            else
                if grep -q "!${list}!" "$IDLIST"; then
                    timedel "$list"
                    sed -i "/!$list!/d" "$IDLIST" >/dev/null 2>&1
                fi
            fi
        done
        echolog "Time control started with $(wc -l < "$IDLIST") devices"
        ;;
    "add")
        for list in $(echo "$crid" | sed -e 's/!//g' | sed 's/,/ /g'); do
            if check_list "$list"; then
                timeadd "$list"
                if ! grep -q "!$list!" "$IDLIST"; then
                    echo "!$list!" >> "$IDLIST"
                fi
            else
                if grep -q "!${list}!" "$IDLIST"; then
                timedel "$list"
                sed -i "/!$list!/d" "$IDLIST" 2>/dev/null
                fi
            fi
        done
        ;;
    "del")
        for list in `echo $crid | sed -e 's/!//g' | sed 's/,/ /g' ` ;do
            timedel "$list"
            sed -i "/!$list!/d" "$IDLIST" 2>/dev/null
        done
        ;;
    *)
        echolog "Invalid command: $crrun"
        exit 1
        ;;
esac

