#!/bin/sh

. /lib/functions.sh
. /lib/functions/network.sh

band_steer_helper=${band_steer_helper:-none}

band_steer_helper_switch()
{
	if [ "$band_steer_helper" = "usteer" ]; then
		uci delete usteer.@usteer[0].event_log_types 2>/dev/null
		uci delete usteer.@usteer[0].ssid_list 2>/dev/null
		uci commit usteer
		test -x /etc/init.d/dawn && {
			/etc/init.d/dawn enabled && /etc/init.d/dawn disable
			/etc/init.d/dawn running && /etc/init.d/dawn stop
		}
		test -x /etc/init.d/usteer && {
			/etc/init.d/usteer enabled || /etc/init.d/usteer enable
			/etc/init.d/usteer running || /etc/init.d/usteer start
		}
	elif [ "$band_steer_helper" = "dawn" ]; then
		test -x /etc/init.d/usteer && {
			/etc/init.d/usteer enabled && /etc/init.d/usteer disable
			/etc/init.d/usteer running && /etc/init.d/usteer stop
		}
		test -x /etc/init.d/dawn && {
			/etc/init.d/dawn enabled || /etc/init.d/dawn enable
			/etc/init.d/dawn running || /etc/init.d/dawn start
		}
	else
		test -x /etc/init.d/dawn && {
			/etc/init.d/dawn enabled && /etc/init.d/dawn disable
			/etc/init.d/dawn running && /etc/init.d/dawn stop
		}
		test -x /etc/init.d/usteer && {
			/etc/init.d/usteer enabled && /etc/init.d/usteer disable
			/etc/init.d/usteer running && /etc/init.d/usteer stop
		}
	fi
}

[ "x$1" = "xband_steer_helper_switch" ] && {
	band_steer_helper_switch
	exit 0
}

[ "x$1" = "xsetup" ] && {
	exit 0
}

config_load fakemesh

config_get_bool enabled default 'enabled' '0'

test $enabled -eq 0 && {
	rm -f /www/fakemesh.*
	rm -rf /tmp/fakemesh_lck*
	rm -f /tmp/fakemesh.firewall.include

	test -e /etc/init.d/umdns && {
	rm /tmp/fakemesh.umdns.json 2>/dev/null && \
	/etc/init.d/umdns restart
	}

	uci delete wireless.meshx0 &>/dev/null
	uci delete wireless.meshx1 &>/dev/null

	I=0
	while uci get wireless.@wifi-iface[$I] &>/dev/null; do
		echo "$(uci get wireless.@wifi-iface[$I].network)" | grep -q "^meshx" && {
			uci set wireless.@wifi-iface[$I].network="lan"
		}
		I=$((I+1))
	done

	uci delete fakemesh.default.wifim_md5 &>/dev/null
	uci delete dhcp.meshx0 &>/dev/null
	uci delete network.meshx0 &>/dev/null
	uci delete network.meshx0_6 &>/dev/null
	uci delete firewall.fakemesh &>/dev/null
	sed -i "/.* controller.fakemesh/d" /etc/hosts
	sed -i "/sh \/usr\/share\/fakemesh\/firewall.include.*/d" /etc/firewall.include

	#re-enable lan
	uci delete network.lan.auto &>/dev/null
	#re-enable wan
	uci delete network.wan.auto &>/dev/null
	uci delete network.wan6.auto &>/dev/null
	#del wan port from br-lan
	lan_idx=0
	while uci get network.@device[$lan_idx] &>/dev/null && [ $(uci get network.@device[$lan_idx].name) != "br-lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_ports="$(uci get network.@device[$lan_idx].ports 2>/dev/null)"
	wan_port="$(uci get network.wan.device 2>/dev/null)"
	newlan_ports=$(for lp in $lan_ports; do [ "$lp" = "$wan_port" ] || echo $lp; done | sort | uniq)
	newlan_ports=$(echo $newlan_ports)
	[ "$lan_ports" != "$newlan_ports" ] && {
		uci delete network.@device[$lan_idx].ports &>/dev/null
		for lp in $newlan_ports; do
			uci add_list network.@device[$lan_idx].ports="$lp"
		done
	}

	#delete meshx0 from lan zone
	lan_idx=0
	while uci get firewall.@zone[$lan_idx] &>/dev/null && [ $(uci get firewall.@zone[$lan_idx].name) != "lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_net="$(uci get firewall.@zone[$lan_idx].network 2>/dev/null)"
	newlan_net=$(for ln in $lan_net; do [ "$ln" = "meshx0" -o "$ln" = "meshx0_6" ] || echo $ln; done | sort | uniq)
	newlan_net=$(echo $newlan_net)
	[ "$lan_net" != "$newlan_net" ] && {
		uci delete firewall.@zone[$lan_idx].network &>/dev/null
		for ln in $newlan_net; do
			uci add_list firewall.@zone[$lan_idx].network="$ln"
		done
		uci commit firewall
	}

	uci changes

	uci commit fakemesh
	uci commit wireless
	uci commit dhcp
	uci commit firewall
	uci commit network
	/etc/init.d/network reload
	/etc/init.d/dnsmasq reload
	/etc/init.d/firewall reload &>/dev/null
	exit 0
}

config_get role default 'role' 'agent'
config_get band default 'band' '5g'
config_get Xid default 'id'
config_get Xkey default 'key'
config_get access_ip default 'access_ip' '10.10.10.1'
config_get sync_ac default 'sync_ac' '1'
config_get fronthaul_disabled default 'fronthaul_disabled' '0'

lost_ac=${lost_ac:-0}
LOST_AC_CNT=3

agent_lost_ac()
{
	[ "$role" = "agent" ] || [ "$role" = "wap" ] || return 0

	pid=$$
	logger -t fakemesh "agent_lost_ac($pid): started! lost_ac=$lost_ac"

	if test $lost_ac -gt $LOST_AC_CNT; then
		rm -rf /tmp/fakemesh_lck3
		lost_ac=$lost_ac exec /usr/sbin/fakemesh agent_sync_config &
		return 0
	fi

	#re-enable lan
	uci delete network.lan.auto &>/dev/null
	uci set network.lan.ipaddr="192.168.16.1"
	for lip in `seq 16 20`; do
		if ip route | grep -q "192.168.$lip.0/"; then
			:
		else
			uci set network.lan.ipaddr="192.168.$lip.1"
			break
		fi
	done
	uci set network.lan.netmask='255.255.255.0'
	logger -t fakemesh "agent_lost_ac($pid): setup temporary lan ip=$(uci get network.lan.ipaddr)"

	#re-enable lan enable wifi
	ssid="$(uci get base_config.@status[0].SSID)@$(uci get network.lan.ipaddr)"
	ssid_passwd=$(uci get base_config.@status[0].SSID_PASSWD)
	K=0
	for band in 2g 5g; do
		wbandstr=$(uci show wireless | grep .band=\'${band}\'$ -m1)
		if test -n "$wbandstr"; then
			radio=$(echo $wbandstr | cut -d\. -f2)

			uci set wireless.wifinet$K=wifi-iface
			uci set wireless.wifinet$K.device="${radio}"
			uci set wireless.wifinet$K.network='lan'
			uci set wireless.wifinet$K.mode='ap'
			uci set wireless.wifinet$K.ssid="${ssid}"
			uci set wireless.wifinet$K.encryption="psk2"
			uci set wireless.wifinet$K.key="${ssid_passwd}"
			uci set wireless.wifinet$K.wpa_group_rekey='601'
			uci set wireless.wifinet$K.max_inactivity='301'
			if uci get wireless.${radio}.path | grep -q bcma || iwinfo wlan${radio:5} info | grep -qi Cypress; then
				WLAN_IDX=${radio:5}
				uci set wireless.wifinet$K.ifname="wlan${WLAN_IDX}"
			else
				uci set wireless.wifinet$K.ieee80211r='1'
				uci set wireless.wifinet$K.ft_over_ds='0'
				uci set wireless.wifinet$K.ft_psk_generate_local='1'
			fi

			uci delete wireless.wifinet$K.disabled 2>/dev/null
			K=$((K+1))
			logger -t fakemesh "agent_lost_ac($pid): starting wifi SSID=\'${ssid}\' on ${radio} $band!"
		fi
	done
	while uci get wireless.wifinet$K 2>/dev/null; do
		uci set wireless.wifinet$K.disabled='1'
		K=$((K+1))
	done

	nft_add_brmeshfilters() {
		brif="$1"
		nft add table netdev brmeshfilters_$brif 2>/dev/null
		nft "add chain netdev brmeshfilters_$brif devfilter { type filter hook ingress device $brif priority 0 ; }" 2>/dev/null
		nft add rule netdev brmeshfilters_$brif devfilter udp sport 68 drop 2>/dev/null
	}

	#drop all in-comming DHCP request from eth port
	for brif in $(cd /sys/class/net/br-lan/brif/ && ls); do
		iwinfo $brif info &>/dev/null && [ "$brif" != "meshx0" ] && [ "$brif" != "meshx1" ] && continue
		nft_add_brmeshfilters $brif
	done

	#dhcp no push router for lan, no push dns for lan
	uci add_list dhcp.lan.dhcp_option='option:router'
	uci add_list dhcp.lan.dhcp_option='6'

	/etc/init.d/network reload
	/etc/init.d/dnsmasq reload
	sleep 5
	uci revert dhcp
	uci revert network
	uci revert wireless

	#drop all in-comming DHCP request from eth port
	#XXX: since network reload, netdevice may unregister and re-create, it is safe to re-add filter rules again.
	for brif in $(cd /sys/class/net/br-lan/brif/ && ls); do
		iwinfo $brif info &>/dev/null && [ "$brif" != "meshx0" ] && [ "$brif" != "meshx1" ] && continue
		nft_add_brmeshfilters $brif
	done

	logger -t fakemesh "agent_lost_ac($pid): done!"

	#make sure agent_sync_config stopped
	rm -rf /tmp/fakemesh_lck3
	lost_ac=$lost_ac exec /usr/sbin/fakemesh agent_sync_config &
}

agent_sync_config()
{
	[ "$sync_ac" = "1" ] || {
		return 0
	}
	[ "$role" = "wap" ] && {
		#make sure agent_keep_alive stopped
		rm -rf /tmp/fakemesh_lck2*
	}

	mkdir /tmp/fakemesh_lck3 || return 0
	pid=$$
	touch /tmp/fakemesh_lck3/$pid

	logger -t fakemesh "agent_sync_config($pid): started!"

	touch /tmp/fakemesh.ac.config
	ln -s /tmp/fakemesh.ac.config /etc/config/fakemeshac 2>/dev/null

	while :; do
		[ "$role" != "controller" ] && {
			if test $lost_ac -gt 2; then
				ubus call network.interface.meshx0 down
				sleep 1
				ubus call network.interface.meshx0 up
				sleep 1
			fi
			ubus -t 15 wait_for network.interface.meshx0
		}
		sleep 15
		achost=controller.fakemesh
		if [ "$role" != "controller" ]; then
			if test $lost_ac -gt 0; then
				/etc/init.d/umdns reload
				sleep 5
			fi
			achost="$(ubus call umdns browse | jsonfilter -e "@['_fakemesh_${Xid}._tcp'][*]['ipv4']")"
			if ! test -n "$achost"; then
				logger -t fakemesh "agent_sync_config($pid): umdns: achost not found(lost_ac=$lost_ac)!"
				achost=controller.fakemesh
			fi
			acnum=$(echo -n "$achost" | wc -w)
			if [ "$acnum" -gt 1 ]; then
				logger -t fakemesh "agent_sync_config($pid): umdns: achost found $acnum($achost)(lost_ac=$lost_ac)!"
				rand=$(hexdump -e '"%u"' -n1 /dev/urandom)
				rand=$(((rand % acnum) + 1))
				achost=$(for w in $achost; do echo $w; done | head -n$rand | tail -n1)
				logger -t fakemesh "agent_sync_config($pid): umdns: achost found random select($achost)(lost_ac=$lost_ac)!"
			fi
		fi

		hash=$(echo -n ${Xid}${Xkey} | md5sum | head -c32)
		if ( \
		[ "$role" = "controller" ] && cp /etc/config/fakemesh /tmp/fakemesh.ac.config.tmp || \
		timeout 10 wget -4 -qO /tmp/fakemesh.ac.config.tmp http://$achost/fakemesh.$hash 2>/dev/null ); then
			:
		else
			lost_ac=$((lost_ac+1))
			logger -t fakemesh "agent_sync_config($pid): fetch config from $achost failed($lost_ac)!"
			acip=$(ip route | grep "default via" -m1 | awk '{print $3}')
			if test -n "$acip" && ifconfig br-lan | grep -q "addr:$acip "; then
				logger -t fakemesh "agent_sync_config($pid): acip=$acip is setup on br-lan(lost_ac=$lost_ac)!"
				ubus call network.interface.lan down
				/etc/init.d/network reload
				sleep 5
			fi
			if test -n "$acip" && [ "$role" != "controller" ] && timeout 5 wget -4 -qO /tmp/fakemesh.ac.config.tmp http://$acip/fakemesh.$hash 2>/dev/null; then
				logger -t fakemesh "agent_sync_config($pid): fetch config from gateway($acip) ok(lost_ac=$lost_ac)"
			elif test -n "$achost" && [ "$role" != "controller" ] && timeout 5 wget -4 -qO /tmp/fakemesh.ac.config.tmp http://$achost/fakemesh.$hash 2>/dev/null; then
				logger -t fakemesh "agent_sync_config($pid): fetch config from achost($achost) ok(lost_ac=$lost_ac)"
			else
				if test $lost_ac -ge $LOST_AC_CNT; then
					lost_ac=$lost_ac exec /usr/sbin/fakemesh agent_lost_ac &
					return 0
				fi
				logger -t fakemesh "agent_sync_config($pid): fetch config from achost($achost)/gateway($acip) failed($lost_ac), wait 30s"
				sleep 30
				rm -f /tmp/fakemesh.ac.config.tmp
				test -f /tmp/fakemesh_lck3/$pid || return 0
				continue
			fi
		fi

		if ! grep -q fakemesh /tmp/fakemesh.ac.config.tmp; then
			rm -f /tmp/fakemesh.ac.config.tmp
			test -f /tmp/fakemesh_lck3/$pid || return 0
			continue
		fi

		mv /tmp/fakemesh.ac.config.tmp /tmp/fakemesh.ac.config

		test $lost_ac -gt 0 && logger -t fakemesh "agent_sync_config($pid): fetch config ok!"

		oldbsh=$(uci get fakemesh.default.band_steer_helper || echo none)
		newbsh=$(uci get fakemeshac.default.band_steer_helper || echo none)
		[ "${oldbsh}" = "${newbsh}" ] || {
			uci set fakemesh.default.band_steer_helper="${newbsh}"
			uci commit fakemesh
			band_steer_helper="${newbsh}" exec /usr/sbin/fakemesh band_steer_helper_switch &
		}

		oldcfgmd5=$(uci get fakemesh.default.wifim_md5 2>/dev/null)
		newcfgmd5=$(uci show fakemeshac | grep "^fakemeshac.@wifim" | md5sum | head -c 32)
		[ "${oldcfgmd5}" = "${newcfgmd5}" ] || {
			logger -t fakemesh "agent_sync_config($pid): config change!"
			#delete old wifi config
			I=0
			while uci get wireless.@wifi-iface[$I] &>/dev/null; do
				if uci show wireless.@wifi-iface[$I] | grep -q wireless.meshx[01]=wifi-iface; then
					I=$((I+1))
					continue
				fi
				uci delete wireless.@wifi-iface[$I] &>/dev/null
			done

			J=0
			K=0
			while uci get fakemeshac.@wifim[$J] &>/dev/null; do
				ssid=$(uci get fakemeshac.@wifim[$J].ssid)
				encryption=$(uci get fakemeshac.@wifim[$J].encryption)
				key=$(uci get fakemeshac.@wifim[$J].key)
				bands=$(uci get fakemeshac.@wifim[$J].band)
				enabled=$(uci get fakemeshac.@wifim[$J].enabled || echo 1)

				[ "$bands" = "2g5g" ] && bands="2g 5g"

				[ "$enabled" = "1" ] && {
					for band in $bands; do
						for wbandstr in $(uci show wireless | grep .band=\'${band}\'$); do
						if test -n "$wbandstr"; then
							radio=$(echo $wbandstr | cut -d\. -f2)

							uci set wireless.wifinet$K=wifi-iface
							uci set wireless.wifinet$K.device="${radio}"
							if [ "$role" = "controller" ]; then
								uci set wireless.wifinet$K.network='lan'
							else
								uci set wireless.wifinet$K.network='meshx0'
							fi
							uci set wireless.wifinet$K.mode='ap'
							uci set wireless.wifinet$K.ssid="${ssid}"
							uci set wireless.wifinet$K.wpa_group_rekey='601'
							uci set wireless.wifinet$K.max_inactivity='301'
							if [ "${encryption}" != "none" ]; then
								uci set wireless.wifinet$K.encryption="${encryption}"
								uci set wireless.wifinet$K.key="${key}"
							else
								uci set wireless.wifinet$K.encryption='none'
							fi
							if uci get wireless.${radio}.path | grep -q bcma || iwinfo wlan${radio:5} info | grep -qi Cypress; then
								WLAN_IDX=${radio:5}
								uci set wireless.wifinet$K.ifname="wlan${WLAN_IDX}"
							else
								uci set wireless.wifinet$K.ieee80211r='1'
								uci set wireless.wifinet$K.ft_over_ds='1'
								uci set wireless.wifinet$K.ft_psk_generate_local='1'
							fi
							if opkg list-installed 2>/dev/null | grep -q wpad-basic || apk list 2>/dev/null | grep wpad-basic | grep -q installed; then
								:
							else
								uci set wireless.wifinet$K.bss_transition='1'
								uci set wireless.wifinet$K.wnm_sleep_mode='1'
								uci set wireless.wifinet$K.time_advertisement='2'
								uci set wireless.wifinet$K.time_zone='GMT0'
								uci set wireless.wifinet$K.ieee80211k='1'
								uci set wireless.wifinet$K.rrm_neighbor_report='1'
								uci set wireless.wifinet$K.rrm_beacon_report='1'
							fi

							K=$((K+1))
						fi
						done
					done
				}

				J=$((J+1))
			done

			uci set fakemesh.default.wifim_md5="${newcfgmd5}"

			uci commit fakemesh
			uci commit wireless
			/etc/init.d/network reload &
		}

		test -f /tmp/fakemesh_lck3/$pid || return 0

		if test $lost_ac -ge $LOST_AC_CNT; then
			logger -t fakemesh "agent_sync_config($pid): recovery from lost_ac=$lost_ac!"
			sleep 5
			/etc/init.d/network reload
			/etc/init.d/dnsmasq reload
			nft list tables 2>/dev/null | grep 'table netdev brmeshfilters_' | while read tb; do
				nft delete $tb
			done
			test -x /etc/init.d/umdns && /etc/init.d/umdns reload
			test -x /etc/init.d/dawn && /etc/init.d/dawn restart
		fi
		lost_ac=0

		rand=$(hexdump -e '"%u"' -n1 /dev/urandom)
		sleep $((50+(rand+0)%20))
		test -f /tmp/fakemesh_lck3/$pid || return 0
	done

	rm -f /tmp/fakemesh_lck3/$pid; rmdir /tmp/fakemesh_lck3
}

agent_keep_alive()
{
	[ "$role" = "agent" ] || return 0

	sta_lost=0

	wbandstr=$(uci show wireless | grep .band=\'${band}\'$ -m1)
	radio=$(echo $wbandstr | cut -d\. -f2)
	channel=$(uci get wireless.${radio}.channel)
	test -n "$channel" || return 1

	mkdir /tmp/fakemesh_lck2 || return 0
	pid=$$
	touch /tmp/fakemesh_lck2/$pid

	logger -t fakemesh "agent_keep_alive($pid): started!"
	while :; do
		sleep 10
		sta="$(ubus -S list wpa_supplicant.meshx1)"
		if test -n "$sta"; then
			if [ $(iwinfo meshx1 info | grep -c 'ESSID: unknown') -ge 1 ]; then
				sta_lost=$((sta_lost+1))
				if [ "$sta_lost" -ge 3 ]; then
					logger -t fakemesh "agent_keep_alive($pid): Agent lost connection!"
					rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
					exec /usr/sbin/fakemesh agent_fix_channel &
					return 0
				fi
			elif [ "$(iwinfo meshx1 info | head -n3 | tail -n1 | awk '{print $4}')" != "$channel" ]; then
				logger -t fakemesh "agent_keep_alive($pid): Agent channel changed!"
				rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
				exec /usr/sbin/fakemesh agent_fix_channel &
				return 0
			fi
		fi
		sleep 30
		test -f /tmp/fakemesh_lck2/$pid || return 0
	done

	rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
}

agent_fix_channel()
{
	exec /usr/sbin/fakemesh agent_sync_config &

	[ "$role" = "agent" ] || return 0

	wbandstr=$(uci show wireless | grep .band=\'${band}\'$ -m1)
	radio=$(echo $wbandstr | cut -d\. -f2)
	channel=$(uci get wireless.${radio}.channel)
	test -n "$channel" || return 1

	mkdir /tmp/fakemesh_lck1 || return 0
	pid=$$
	touch /tmp/fakemesh_lck1/$pid

	logger -t fakemesh "agent_fix_channel($pid): started!"
	while :; do
		sleep 10
		sta="$(ubus -S list wpa_supplicant.meshx1)"
		if test -n "$sta"; then
			chan=$(iwinfo meshx1 scan | grep -A1 -B1 "ESSID: \"${Xid}\"" | head -n3 | tail -n1 | grep -io "Channel:.*"| awk '{print $2}')
			if test -n "$chan"; then
				if [ "$chan" != "$channel" ]; then
					logger -t fakemesh "agent_fix_channel($pid): Setting up channel ($chan) for ${radio}"
					uci set wireless.${radio}.channel="$chan"
					test "$chan" -ge "36" -a "$chan" -le "44" || {
						htmode=$(uci get wireless.${radio}.htmode 2>/dev/null)
						if [ "$htmode" = "VHT160" ]; then
							uci set wireless.${radio}.htmode="VHT80"
						elif [ "$htmode" = "HE160" ]; then
							uci set wireless.${radio}.htmode="HE80"
						fi
					}
					uci commit wireless
					/etc/init.d/network reload &
				fi
				logger -t fakemesh "agent_fix_channel($pid): Channel ($chan) for ${radio} ready!"
				break
			fi
		fi
		sleep 20
		test -f /tmp/fakemesh_lck1/$pid || return 0
	done

	rm -f /tmp/fakemesh_lck1/$pid; rmdir /tmp/fakemesh_lck1

	exec /usr/sbin/fakemesh agent_keep_alive &
}

[ "x$1" = "xagent_lost_ac" ] && {
	agent_lost_ac
	exit 0
}

[ "x$1" = "xagent_fix_channel" ] && {
	agent_fix_channel
	exit 0
}

[ "x$1" = "xagent_keep_alive" ] && {
	agent_keep_alive
	exit 0
}

[ "x$1" = "xagent_sync_config" ] && {
	agent_sync_config
	exit 0
}

[ "x$1" = "xgen_config" ] && {
	# http://controller.fakemesh/fakemesh.435ca8a686ae9f07eb4eb67d2216b154
	[ "$role" = "controller" ] && {
		hash=$(echo -n ${Xid}${Xkey} | md5sum | head -c32)
		ln -s /etc/config/fakemesh /www/fakemesh.$hash 2>/dev/null
		for f in $(ls /www/fakemesh.*); do
			[ "$f" != "/www/fakemesh.$hash" ] && rm -f "$f"
		done
	}
	exit 0
}

test -n "${Xid}" || {
	exit 0
}

rm -rf /tmp/fakemesh_lck*

MACADDR=""
test -e /usr/share/natcapd/board_mac.lua && MACADDR=$(lua /usr/share/natcapd/board_mac.lua)
test -n "$MACADDR" || MACADDR=$(. /lib/functions/system.sh; get_mac_label | tr a-f A-F)
test -n "$MACADDR" || MACADDR=$(cat /etc/board.json | jsonfilter -e "$['network']['wan']['macaddr']" | tr a-f A-F)
test -n "$MACADDR" || MACADDR=$(cat /etc/board.json | jsonfilter -e "$['network']['lan']['macaddr']" | tr a-f A-F)
test -n "$MACADDR" || MACADDR=$(cat /sys/class/net/eth0/address | tr a-f A-F)
test -n "$MACADDR" || MACADDR=$(cat /sys/class/net/eth1/address | tr a-f A-F)
test -n "$MACADDR" || MACADDR=$(head -c6 /dev/urandom | hexdump -e '/1 "%02X:"' | head -c17)
test -n "$MACADDR" || MACADDR=$(head -c6 /dev/random | hexdump -e '/1 "%02X:"' | head -c17)

if [ "$role" = "controller" ]; then

	rm -rf /tmp/fakemesh_lck*

	test -e /etc/init.d/umdns && {
	mkdir -p /etc/umdns
	ln -s /tmp/fakemesh.umdns.json /etc/umdns 2>/dev/null
	umdns_json="{
	\"fakemesh\": {
		\"service\": \"_fakemesh_${Xid}._tcp.local\",
		\"port\": 65535,
		\"txt\": [ \"id=${Xid}\" ]
	}
}"
	[ "$(cat /tmp/fakemesh.umdns.json 2>/dev/null | md5sum | head -c32)" = "$(echo "$umdns_json" | md5sum | head -c32)" ] || {
	echo "$umdns_json" >/tmp/fakemesh.umdns.json
	/etc/init.d/umdns restart
	}
	}

	# wireless.radio0.band='2g'
	wbandstr=$(uci show wireless | grep .band=\'${band}\'$ -m1)
	if test -n "$wbandstr"; then
		radio=$(echo $wbandstr | cut -d\. -f2) # radio0

		#meshx0
		uci set wireless.meshx0=wifi-iface
		uci set wireless.meshx0.device="${radio}"
		uci set wireless.meshx0.network='lan'
		uci set wireless.meshx0.ifname='meshx0'
		uci set wireless.meshx0.mode='ap'
		uci set wireless.meshx0.wds='1'
		uci set wireless.meshx0.ssid="${Xid}"
		uci set wireless.meshx0.hidden='1'
		uci set wireless.meshx0.wpa_group_rekey='601'
		uci set wireless.meshx0.max_inactivity='301'
		if test -n "${Xkey}"; then
			uci set wireless.meshx0.encryption='psk2'
			uci set wireless.meshx0.key="${Xkey}"
		else
			uci set wireless.meshx0.encryption='none'
		fi
		if [ "$fronthaul_disabled" = "1" ]; then
			uci set wireless.meshx0.disabled='1'
		else
			uci delete wireless.meshx0.disabled 2>/dev/null
		fi

		#meshx1
		uci delete wireless.meshx1 &>/dev/null
	fi

	uci delete dhcp.meshx0 &>/dev/null
	uci delete network.meshx0 &>/dev/null
	uci delete network.meshx0_6 &>/dev/null

	#re-enable lan
	uci delete network.lan.auto &>/dev/null
	#re-enable wan
	uci delete network.wan.auto &>/dev/null
	uci delete network.wan6.auto &>/dev/null
	#del wan port from br-lan
	lan_idx=0
	while uci get network.@device[$lan_idx] &>/dev/null && [ $(uci get network.@device[$lan_idx].name) != "br-lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_ports="$(uci get network.@device[$lan_idx].ports 2>/dev/null)"
	wan_port="$(uci get network.wan.device 2>/dev/null)"
	newlan_ports=$(for lp in $lan_ports; do [ "$lp" = "$wan_port" ] || echo $lp; done | sort | uniq)
	newlan_ports=$(echo $newlan_ports)
	[ "$lan_ports" != "$newlan_ports" ] && {
		uci delete network.@device[$lan_idx].ports &>/dev/null
		for lp in $newlan_ports; do
			uci add_list network.@device[$lan_idx].ports="$lp"
		done
	}

	#delete meshx0 from lan zone
	lan_idx=0
	while uci get firewall.@zone[$lan_idx] &>/dev/null && [ $(uci get firewall.@zone[$lan_idx].name) != "lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_net="$(uci get firewall.@zone[$lan_idx].network 2>/dev/null)"
	newlan_net=$(for ln in $lan_net; do [ "$ln" = "meshx0" -o "$ln" = "meshx0_6" ] || echo $ln; done | sort | uniq)
	newlan_net=$(echo $newlan_net)
	[ "$lan_net" != "$newlan_net" ] && {
		uci delete firewall.@zone[$lan_idx].network &>/dev/null
		for ln in $newlan_net; do
			uci add_list firewall.@zone[$lan_idx].network="$ln"
		done
		uci commit firewall
	}

	# reload firewall
	uci delete firewall.fakemesh &>/dev/null && uci commit firewall

	mkdir -p /usr/share/fakemesh
	cat >/tmp/fakemesh.firewall.include <<-EOT
#!/bin/sh
iptables -t nat -C prerouting_lan_rule -d $access_ip/32 -p tcp --dport 80 -j REDIRECT --to-ports 80 2>/dev/null || \
iptables -t nat -A prerouting_lan_rule -d $access_ip/32 -p tcp --dport 80 -j REDIRECT --to-ports 80 2>/dev/null
iptables -t nat -C prerouting_lan_rule -d $access_ip/32 -p tcp --dport 443 -j REDIRECT --to-ports 443 2>/dev/null || \
iptables -t nat -A prerouting_lan_rule -d $access_ip/32 -p tcp --dport 443 -j REDIRECT --to-ports 443 2>/dev/null

nft -a list chain inet fw4 dstnat 2>/dev/null | grep -o "fakemesh.*" | while read _ _ _ handle; do nft delete rule inet fw4 dstnat handle \$handle; done
nft insert rule inet fw4 dstnat iifname { \$(echo \$(fw4 -q zone lan | grep -v '*' | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } ip daddr $access_ip/32 tcp dport 80 counter redirect to :80 comment "fakemesh" 2>/dev/null
nft insert rule inet fw4 dstnat iifname { \$(echo \$(fw4 -q zone lan | grep -v '*' | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } ip daddr $access_ip/32 tcp dport 443 counter redirect to :443 comment "fakemesh" 2>/dev/null

EOT
	ln -s /tmp/fakemesh.firewall.include /usr/share/fakemesh/firewall.include 2>/dev/null
	grep -q "^sh /usr/share/fakemesh/firewall.include" /etc/firewall.include || echo "sh /usr/share/fakemesh/firewall.include" >>/etc/firewall.include

	grep -q "^$access_ip controller.fakemesh ac.fakemesh" /etc/hosts || {
		if grep -q ".* controller.fakemesh ac.fakemesh" /etc/hosts; then
			sed -i "s/.* controller.fakemesh ac.fakemesh/$access_ip controller.fakemesh ac.fakemesh/" /etc/hosts
		else
			echo "$access_ip controller.fakemesh ac.fakemesh" >>/etc/hosts
		fi
		/etc/init.d/dnsmasq reload
	}

	/etc/init.d/firewall reload &>/dev/null

	exec /usr/sbin/fakemesh gen_config &

	uci changes

	test $(uci changes 2>/dev/null | grep -v "='dhcp'\|='interface'\|='wifi-iface'" | wc -l) -le 0 && {
		uci revert wireless
		uci revert dhcp
		uci revert network

		exec /usr/sbin/fakemesh agent_sync_config &
		exit 0
	}

	uci commit wireless
	uci commit dhcp
	uci commit network

	(sleep 15
	 /etc/init.d/network reload
	 /etc/init.d/dnsmasq reload
	 exec /usr/sbin/fakemesh agent_sync_config & )&
else
	rm -f /www/fakemesh.*
	/etc/init.d/sta_disable enabled 2>/dev/null && /etc/init.d/sta_disable disable

	test -e /etc/init.d/umdns && {
	rm /tmp/fakemesh.umdns.json 2>/dev/null && \
	/etc/init.d/umdns restart
	}

	# wireless.radio0.band='2g'
	wbandstr=$(uci show wireless | grep .band=\'${band}\'$ -m1)
	if test -n "$wbandstr"; then
		radio=$(echo $wbandstr | cut -d\. -f2) # radio0

		#meshx0
		uci set wireless.meshx0=wifi-iface
		uci set wireless.meshx0.device="${radio}"
		uci set wireless.meshx0.network='meshx0'
		uci set wireless.meshx0.ifname='meshx0'
		uci set wireless.meshx0.mode='ap'
		uci set wireless.meshx0.wds='1'
		uci set wireless.meshx0.ssid="${Xid}"
		uci set wireless.meshx0.hidden='1'
		uci set wireless.meshx0.wpa_group_rekey='601'
		uci set wireless.meshx0.max_inactivity='301'
		if test -n "${Xkey}"; then
			uci set wireless.meshx0.encryption='psk2'
			uci set wireless.meshx0.key="${Xkey}"
		else
			uci set wireless.meshx0.encryption='none'
		fi
		if [ "$fronthaul_disabled" = "1" ]; then
			uci set wireless.meshx0.disabled='1'
		else
			uci delete wireless.meshx0.disabled 2>/dev/null
		fi

		#meshx1
		uci set wireless.meshx1=wifi-iface
		uci set wireless.meshx1.device="${radio}"
		uci set wireless.meshx1.network='meshx0'
		uci set wireless.meshx1.ifname='meshx1'
		uci set wireless.meshx1.mode='sta'
		uci set wireless.meshx1.wds='1'
		uci set wireless.meshx1.ssid="${Xid}"
		if test -n "${Xkey}"; then
			uci set wireless.meshx1.encryption='psk2'
			uci set wireless.meshx1.key="${Xkey}"
		else
			uci set wireless.meshx1.encryption='none'
		fi
		if [ "$role" = "wap" ]; then
			uci set wireless.meshx1.disabled='1'
		else
			uci delete wireless.meshx1.disabled 2>/dev/null
		fi

		if [ "$role" = "agent" ] && [ "$(uci get wireless.${radio}.channel 2>/dev/null || echo auto)" = "auto" ]; then
			if [ "$band" = "5g" ]; then
				uci set wireless.${radio}.channel='36'
			else
				uci set wireless.${radio}.channel='1'
			fi
		fi
	fi

	uci set dhcp.meshx0=dhcp
	uci set dhcp.meshx0.ignore='1'

	uci set network.lan.auto='0'

	uci set network.meshx0=interface
	uci set network.meshx0.device="$(uci get network.lan.device)"
	uci set network.meshx0.proto='dhcp'
	uci set network.meshx0.defaultroute='1'
	uci set network.meshx0.metric='10'
	uci set network.meshx0.hostname="MESH-AGENT_$(echo -n $MACADDR | sed 's/://g' | tr a-f A-F)"

	uci set network.meshx0_6=interface
	uci set network.meshx0_6.proto='dhcpv6'
	uci set network.meshx0_6.device='@meshx0'
	uci set network.meshx0_6.reqaddress='try'
	uci set network.meshx0_6.reqprefix='auto'
	uci set network.meshx0_6.delegate='0'
	uci set network.meshx0_6.hostname="MESH-AGENT_$(echo -n $MACADDR | sed 's/://g' | tr a-f A-F)"

	#add meshx0 to lan zone
	lan_idx=0
	while uci get firewall.@zone[$lan_idx] &>/dev/null && [ $(uci get firewall.@zone[$lan_idx].name) != "lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_net="$(uci get firewall.@zone[$lan_idx].network 2>/dev/null)"
	newlan_net=$(for ln in $lan_net meshx0 meshx0_6; do echo $ln; done | sort | uniq)
	newlan_net=$(echo $newlan_net)
	[ "$lan_net" != "$newlan_net" ] && {
		uci delete firewall.@zone[$lan_idx].network &>/dev/null
		for ln in $newlan_net; do
			uci add_list firewall.@zone[$lan_idx].network="$ln"
		done
		uci commit firewall
	}

	#disable wan
	uci set network.wan.auto='0' 2>/dev/null
	uci set network.wan6.auto='0' 2>/dev/null
	#add wan port to br-lan
	lan_idx=0
	while uci get network.@device[$lan_idx] &>/dev/null && [ $(uci get network.@device[$lan_idx].name) != "br-lan" ]; do lan_idx=$((lan_idx+1)); done
	lan_ports="$(uci get network.@device[$lan_idx].ports 2>/dev/null)"
	wan_port="$(uci get network.wan.device 2>/dev/null)"
	newlan_ports=$(for lp in $lan_ports $wan_port; do echo $lp; done | sort | uniq)
	newlan_ports=$(echo $newlan_ports)
	[ "$lan_ports" != "$newlan_ports" ] && {
		uci delete network.@device[$lan_idx].ports &>/dev/null
		for lp in $newlan_ports; do
			uci add_list network.@device[$lan_idx].ports="$lp"
		done
	}

	# reload firewall
	uci delete firewall.fakemesh &>/dev/null && uci commit firewall

	mkdir -p /usr/share/fakemesh
	cat >/tmp/fakemesh.firewall.include <<-EOT
#!/bin/sh
iptables -t filter -C output_lan_rule -j MARK --set-xmark 0x00010000/0x00010000 2>/dev/null || \
iptables -t filter -A output_lan_rule -j MARK --set-xmark 0x00010000/0x00010000 2>/dev/null
iptables -t nat -C zone_lan_postrouting -m mark --mark 0x00010000/0x00010000 -j MASQUERADE 2>/dev/null || \
iptables -t nat -A zone_lan_postrouting -m mark --mark 0x00010000/0x00010000 -j MASQUERADE 2>/dev/null

nft -a list chain inet fw4 output_lan 2>/dev/null | grep -o "fakemesh_mark_0x10000.*" | while read _ _ _ handle; do nft delete rule inet fw4 output_lan handle \$handle; done
nft insert rule inet fw4 output_lan counter meta mark set mark or 0x10000 comment "fakemesh_mark_0x10000" 2>/dev/null

nft -a list chain inet fw4 srcnat 2>/dev/null | grep -o "fakemesh_mark_0x10000.*" | while read _ _ _ handle; do nft delete rule inet fw4 srcnat handle \$handle; done
nft insert rule inet fw4 srcnat oifname { \$(echo \$(fw4 -q zone lan | grep -v '*' | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } mark and 0x10000 == 0x10000 counter masquerade comment "fakemesh_mark_0x10000" 2>/dev/null
EOT
	ln -s /tmp/fakemesh.firewall.include /usr/share/fakemesh/firewall.include 2>/dev/null
	grep -q "^sh /usr/share/fakemesh/firewall.include" /etc/firewall.include || echo "sh /usr/share/fakemesh/firewall.include" >>/etc/firewall.include

	/etc/init.d/firewall reload &>/dev/null

	uci changes

	test $(uci changes 2>/dev/null | grep -v "='dhcp'\|='interface'\|='wifi-iface'" | wc -l) -le 0 && {
		uci revert wireless
		uci revert dhcp
		uci revert network

		exec /usr/sbin/fakemesh agent_fix_channel &
		exit 0
	}

	uci commit wireless
	uci commit dhcp
	uci commit network
	sed -i "/.* controller.fakemesh/d" /etc/hosts

	(sleep 15
	 /etc/init.d/network reload
	 /etc/init.d/dnsmasq reload
	 exec /usr/sbin/fakemesh agent_fix_channel & )&
fi
