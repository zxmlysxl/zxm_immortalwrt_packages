name: Z-autorepo
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Smart Sync
        run: |
          cd "$GITHUB_WORKSPACE" || exit 1
          
          echo "🔧 安装依赖..."
          sudo apt-get update
          sudo apt-get install -y parallel jq rsync curl

          # 创建详细的调试信息
          echo "=== 系统信息 ==="
          echo "工作目录: $(pwd)"
          echo "Git 状态: $(git status --porcelain | wc -l) 个变更"
          echo "工具版本:"
          which jq && jq --version || echo "jq 未安装"
          which parallel && parallel --version || echo "parallel 未安装"
          which rsync && rsync --version | head -1 || echo "rsync 未安装"

      - name: Run Smart Sync
        run: |
          cd "$GITHUB_WORKSPACE" || exit 1

          # 改进的智能同步函数，包含更好的错误处理
          smart_sync() {
            local repo=$1
            echo "=== 开始处理仓库 ==="
            echo "原始数据: $repo"
            
            # 安全地解析 JSON 字段
            local url=$(echo "$repo" | jq -r '.url // empty')
            local dest=$(echo "$repo" | jq -r '.dest // empty')
            local branch=$(echo "$repo" | jq -r '.branch // "main"')
            local dir=$(echo "$repo" | jq -r '.dir // empty')
            
            # 验证必要字段
            if [ -z "$url" ] || [ -z "$dest" ]; then
              echo "❌ 错误：缺少必要字段 (url 或 dest)"
              return 1
            fi
            
            echo "🔁 正在同步 [$dest] (分支: $branch, 目录: ${dir:-根目录})"
            
            # 创建临时目录
            temp_dir=$(mktemp -d)
            echo "临时目录: $temp_dir"
            
            # 克隆仓库（带重试机制）
            for i in {1..3}; do
              echo "尝试克隆 (第 $i 次)..."
              if git clone --depth 1 --branch "$branch" "$url" "$temp_dir" 2>&1; then
                break
              fi
              if [ $i -eq 3 ]; then
                echo "❌ 克隆失败: $url"
                rm -rf "$temp_dir"
                return 1
              fi
              sleep 5
            done
            
            # 检查克隆的目录是否存在
            if [ ! -d "$temp_dir" ]; then
              echo "❌ 临时目录不存在"
              return 1
            fi
            
            echo "克隆成功，目录内容:"
            ls -la "$temp_dir"
            
            # 检查源目录是否存在
            local source_path="$temp_dir"
            if [ -n "$dir" ]; then
              source_path="$temp_dir/$dir"
              if [ ! -d "$source_path" ]; then
                echo "❌ 源目录不存在: $source_path"
                ls -la "$temp_dir"
                rm -rf "$temp_dir"
                return 1
              fi
            fi
            
            # 创建目标目录
            mkdir -p "$dest"
            
            # 执行同步
            echo "执行同步: $source_path/ -> $dest/"
            if rsync -av --delete "$source_path/" "$dest/" 2>&1; then
              echo "✅ 同步完成 [$dest]"
            else
              echo "❌ 同步失败 [$dest]"
              rm -rf "$temp_dir"
              return 1
            fi
            
            # 清理临时目录
            rm -rf "$temp_dir"
            return 0
          }
          export -f smart_sync

          # 仓库配置列表
          REPOS='[
            {"url":"https://github.com/sirpdboy/luci-app-advancedplus.git","dest":"luci-app-advancedplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-adguardhome.git","dir":"luci-app-adguardhome","dest":"luci-app-adguardhome","branch":"lua"},
            {"url":"https://github.com/sirpdboy/luci-theme-kucat.git","dest":"kucat","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-chatgpt-web.git","dest":"luci-app-chatgpt-web","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netwizard.git","dir":"luci-app-netwizard","dest":"luci-app-netwizard","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netspeedtest.git","dest":"netspeedtest","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-watchdog.git","dest":"watchdog","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-taskplan.git","dir":"luci-app-taskplan","dest":"luci-app-taskplan","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-timecontrol.git","dir":"luci-app-nft-timecontrol","dest":"luci-app-nft-timecontrol","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-poweroffdevice.git","dir":"luci-app-poweroffdevice","dest":"luci-app-poweroffdevice","branch":"js"},
            {"url":"https://github.com/tty228/luci-app-wechatpush.git","dest":"luci-app-wechatpush","branch":"master"},
            {"url":"https://github.com/gdy666/luci-app-lucky.git","dest":"lucky","branch":"main"},
            {"url":"https://github.com/EasyTier/luci-app-easytier.git","dest":"easytier","branch":"main"},
            {"url":"https://github.com/asvow/luci-app-tailscale.git","dest":"luci-app-tailscale","branch":"main"},
            {"url":"https://github.com/nikkinikki-org/OpenWrt-nikki.git","dest":"nikki","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall.git","dir":"luci-app-passwall","dest":"luci-app-passwall","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall2.git","dir":"luci-app-passwall2","dest":"luci-app-passwall2","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall-packages.git","dest":"openwrt-passwall-packages","branch":"main"},
            {"url":"https://github.com/sos801107/luci-app-ota.git","dest":"luci-app-ota","branch":"main"},
            {"url":"https://github.com/brvphoenix/luci-app-wrtbwmon.git","dir":"luci-app-wrtbwmon","dest":"luci-app-wrtbwmon","branch":"master"},
            {"url":"https://github.com/brvphoenix/wrtbwmon.git","dir":"wrtbwmon","dest":"wrtbwmon","branch":"new"},
            {"url":"https://github.com/nikkinikki-org/OpenWrt-momo.git","dir":"luci-app-momo","dest":"luci-app-momo","branch":"main"},
            {"url":"https://github.com/nikkinikki-org/OpenWrt-momo.git","dir":"momo","dest":"momo","branch":"main"},
            {"url":"https://github.com/vernesong/OpenClash.git","dir":"luci-app-openclash","dest":"luci-app-openclash","branch":"master"},
            {"url":"https://github.com/linkease/istore.git","dest":"istore","branch":"main"}
          ]'

          # 先测试单个仓库
          echo "=== 测试单个仓库 ==="
          test_repo='{"url":"https://github.com/sirpdboy/luci-app-advancedplus.git","dest":"test-luci-app-advancedplus","branch":"main"}'
          if ! smart_sync "$test_repo"; then
            echo "❌ 测试仓库失败，停止执行"
            exit 1
          fi

          # 如果测试成功，执行全部同步（减少并发数）
          echo "=== 开始同步所有仓库 ==="
          echo "$REPOS" | jq -c '.[]' | parallel -j 2 --halt soon,fail=1 smart_sync

          echo "✅ 所有仓库同步完成"

      - name: Commit Changes
        run: |
          cd "$GITHUB_WORKSPACE" || exit 1
          
          git config --global user.name "zxmlysxl"
          git config --global user.email "zxmlysxl@gmail.com"
          
          # 检查是否有变更
          if git status --porcelain | grep -q .; then
            echo "检测到变更:"
            git status --porcelain
            git add .
            git commit -m "chore: sync repositories $(date +'%Y-%m-%d %H:%M:%S') [skip ci]"
            git push
            echo "✅ 已提交变更"
          else
            echo "🟢 无变更需要提交"
          fi
