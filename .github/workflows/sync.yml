name: Atomic Sync Repos
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    env:
      GIT_RETRIES: 3
      SYNC_TIMEOUT: 600

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Atomic Sync (Protected Files)
        run: |
          # 定义需要保护的文件列表（相对仓库根目录的路径,目录需以/结尾）
          PROTECTED_FILES=(
            "openwrt-passwall-packages/tcping/makefile"
          )

          # 标记保护文件（跳过Git更新）
          echo "🔒 正在保护本地修改的文件..."
          for file in "${PROTECTED_FILES[@]}"; do
            if [ -e "$file" ]; then
              git update-index --skip-worktree "$file"
              echo "  - 已保护: $file"
            else
              echo "  - 文件不存在（跳过）: $file"
            fi
          done

          # 定义仓库列表
          REPOS='[
            {"url":"https://github.com/sirpdboy/luci-app-advancedplus.git","dest":"luci-app-advancedplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-adguardhome.git","dir":"luci-app-adguardhome","dest":"luci-app-adguardhome","branch":"lua"},
            {"url":"https://github.com/sirpdboy/luci-theme-kucat.git","dest":"kucat","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-kucat-config.git","dest":"kucat-config","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-chatgpt-web.git","dest":"luci-app-chatgpt-web","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netwizard.git","dir":"luci-app-netwizard","dest":"luci-app-netwizard","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netspeedtest.git","dest":"netspeedtest","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-netdata.git","dest":"luci-app-netdata","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-timecontrol.git","dir":"luci-app-nft-timecontrol","dest":"luci-app-nft-timecontrol","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-eqosplus.git","dest":"luci-app-eqosplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-watchdog.git","dest":"watchdog","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-taskplan.git","dir":"luci-app-taskplan","dest":"luci-app-taskplan","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-poweroffdevice.git","dir":"luci-app-poweroffdevice","dest":"luci-app-poweroffdevice","branch":"js"},
            {"url":"https://github.com/tty228/luci-app-wechatpush.git","dest":"luci-app-wechatpush","branch":"master"},
            {"url":"https://github.com/gdy666/luci-app-lucky.git","dest":"lucky","branch":"main"},
            {"url":"https://github.com/EasyTier/luci-app-easytier.git","dest":"easytier","branch":"main"},
            {"url":"https://github.com/asvow/luci-app-tailscale.git","dest":"luci-app-tailscale","branch":"main"},
            {"url":"https://github.com/nikkinikki-org/OpenWrt-nikki.git","dest":"nikki","branch":"main"},
            {"url":"https://github.com/oppen321/luci-app-wolplus.git","dest":"luci-app-wolplus","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall.git","dir":"luci-app-passwall","dest":"luci-app-passwall","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall2.git","dir":"luci-app-passwall2","dest":"luci-app-passwall2","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall-packages.git","dest":"openwrt-passwall-packages","branch":"main"},
            {"url":"https://github.com/asvow/luci-app-tailscale.git","dest":"luci-app-tailscale","branch":"main"},
            {"url":"https://github.com/sos801107/luci-app-ota.git","dest":"luci-app-ota","branch":"main"},
            {"url":"https://github.com/linkease/istore.git","dest":"istore","branch":"main"}
          ]'

          # 安装依赖
          sudo apt-get -y install parallel jq

          # 原子同步函数
          atomic_sync() {
            local repo=$1
            local url=$(jq -r '.url' <<< "$repo")
            local dest=$(jq -r '.dest' <<< "$repo")
            local branch=$(jq -r '.branch' <<< "$repo")
            local dir=$(jq -r '.dir // empty' <<< "$repo")
            local temp_dir=$(mktemp -d)
            
            echo "🔁 开始同步 $dest (分支: $branch)"
            
            # 克隆操作
            for i in $(seq 1 $GIT_RETRIES); do
              if git clone --depth 1 --branch "$branch" "$url" "$temp_dir" 2>&1; then
                break
              elif [ $i -eq $GIT_RETRIES ]; then
                echo "❌ 克隆失败，尝试默认分支"
                git clone --depth 1 "$url" "$temp_dir" || return 1
                cd "$temp_dir"
                branch=$(git rev-parse --abbrev-ref origin/HEAD | cut -d'/' -f2)
                git checkout "$branch"
                cd -
              else
                sleep $((i * 5))
              fi
            done

            # 同步
            if [ -n "$dir" ]; then
              echo "🔄 提取子目录: $dir"
              mkdir -p "$dest"
              if [ -d "$temp_dir/$dir" ]; then
                rsync -a --delete --exclude='.git' "$temp_dir/$dir/" "$dest/"
              else
                echo "❌ 子目录 $dir 不存在于仓库中"
                return 1
              fi
            else
              mkdir -p "$dest"
              rsync -a --delete --exclude='.git' "$temp_dir/" "$dest/"
            fi

            echo "✅ $dest 同步成功"
            rm -rf "$temp_dir"
          }
          export -f atomic_sync

          # 执行同步
          echo "$REPOS" | jq -c '.[]' | parallel -j 4 --halt soon,fail=1 atomic_sync

          # 解除文件保护（保持本地修改）
          echo "🔓 恢复文件跟踪状态..."
          for file in "${PROTECTED_FILES[@]}"; do
            if [ -e "$file" ]; then
              git update-index --no-skip-worktree "$file"
            fi
          done

      - name: Atomic Commit
        run: |
          git config --global user.name "zxmlysxl"
          git config --global user.email "zxmlysxl@gmail.com"
          
          changes=$(git status --porcelain)
          [ -z "$changes" ] && { echo "🟢 无变更需要提交"; exit 0; }

          echo "📊 变更统计:"
          git diff --stat
          git status -v

          git add .
          git commit -m "Atomic Sync: $(date +'%Y-%m-%d %H:%M:%S')" || \
          { echo "⚠️ 提交失败，尝试合并冲突"; exit 1; }

      - name: Atomic Push
        run: |
          for i in $(seq 1 5); do
            git fetch origin main
            if git diff --quiet origin/main; then
              echo "🟢 远程无新变更，直接推送"
              git push origin HEAD:main && exit 0
            else
              echo "🔄 检测到远程变更，正在变基..."
              git rebase origin/main && \
              git push origin HEAD:main && exit 0 || \
              { 
                echo "⚠️ 尝试 $i/5 失败";
                git rebase --abort;
                git reset --hard origin/main;
                sleep 10;
              }
            fi
          done
          echo "❌ 推送失败超过最大重试次数"
          exit 1
