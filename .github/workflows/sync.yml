- name: Atomic Sync (Guaranteed Local Change Preservation)
  run: |
    # 安装必要工具
    sudo apt-get -y install parallel jq rsync tree

    # 定义仓库列表（保持您的配置）
    REPOS='[
            {"url":"https://github.com/sirpdboy/luci-app-advancedplus.git","dest":"luci-app-advancedplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-theme-kucat.git","dest":"kucat","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-kucat-config.git","dest":"kucat-config","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-chatgpt-web.git","dest":"luci-app-chatgpt-web","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netwizard.git","dir":"luci-app-netwizard","dest":"luci-app-netwizard","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netspeedtest.git","dest":"netspeedtest","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-netdata.git","dest":"luci-app-netdata","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-timecontrol.git","dir":"luci-app-nft-timecontrol","dest":"luci-app-nft-timecontrol","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-eqosplus.git","dest":"luci-app-eqosplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-watchdog.git","dest":"watchdog","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-taskplan.git","dir":"luci-app-taskplan","dest":"luci-app-taskplan","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-poweroffdevice.git","dir":"luci-app-poweroffdevice","dest":"luci-app-poweroffdevice","branch":"js"},
            {"url":"https://github.com/tty228/luci-app-wechatpush.git","dest":"luci-app-wechatpush","branch":"master"},
            {"url":"https://github.com/gdy666/luci-app-lucky.git","dest":"lucky","branch":"main"},
            {"url":"https://github.com/EasyTier/luci-app-easytier.git","dest":"easytier","branch":"main"},
            {"url":"https://github.com/nikkinikki-org/OpenWrt-nikki.git","dest":"nikki","branch":"main"},
            {"url":"https://github.com/animegasan/luci-app-wolplus.git","dest":"luci-app-wolplus","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall.git","dir":"luci-app-passwall","dest":"luci-app-passwall","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall2.git","dir":"luci-app-passwall2","dest":"luci-app-passwall2","branch":"main"},
            {"url":"https://github.com/xiaorouji/openwrt-passwall-packages.git","dest":"openwrt-passwall-packages","branch":"main"},
            {"url":"https://github.com/linkease/istore.git","dest":"istore","branch":"main"}
          ]'

    # 终极版同步函数（确保不覆盖任何本地修改）
    atomic_sync() {
      local repo=$1
      local url=$(jq -r '.url' <<< "$repo")
      local dest=$(jq -r '.dest' <<< "$repo")
      local branch=$(jq -r '.branch' <<< "$repo")
      local dir=$(jq -r '.dir // empty' <<< "$repo")
      local temp_dir=$(mktemp -d)
      
      echo "🔁 开始同步 [$dest] (分支: $branch)"

      # 克隆上游仓库（含重试逻辑）
      for i in $(seq 1 $GIT_RETRIES); do
        if git clone --depth 1 --branch "$branch" "$url" "$temp_dir"; then
          break
        elif [ $i -eq $GIT_RETRIES ]; then
          echo "❌ 克隆失败，尝试默认分支"
          git clone --depth 1 "$url" "$temp_dir" || return 1
          cd "$temp_dir"
          branch=$(git rev-parse --abbrev-ref origin/HEAD | cut -d'/' -f2)
          git checkout "$branch"
          cd -
        else
          sleep $((i * 5))
        fi
      done

      # 检测所有本地变更（关键改进点）
      local exclude_patterns=()
      if [ -d "$dest" ]; then
        cd "$dest"
        # 使用 git + find 确保捕获所有变更（包括未跟踪文件）
        while IFS= read -r file; do
          # 转换为相对路径（兼容子目录同步）
          rel_path="${file#./}"
          if [[ -d "$file" ]]; then
            exclude_patterns+=("--exclude=/${rel_path}/")
            exclude_patterns+=("--exclude=/${rel_path}/*")
          else
            exclude_patterns+=("--exclude=/${rel_path}")
          fi
        done < <(git ls-files --modified --others --exclude-standard && \
                 find . -type f ! -path '*/.git/*' ! -path './.git' | grep -vFx "$(git ls-files)")
        cd -
      fi

      # 打印排除规则（调试用）
      echo "ℹ️ 排除规则:"
      printf '  %s\n' "${exclude_patterns[@]}" | sort | uniq

      # 执行同步（关键：使用 / 开头的排除路径）
      mkdir -p "$dest"
      if [ -n "$dir" ]; then
        echo "🔄 同步子目录: $dir"
        if [ -d "$temp_dir/$dir" ]; then
          rsync -av --delete --exclude='.git' \
            "${exclude_patterns[@]}" \
            "$temp_dir/$dir/" "$dest/"
        else
          echo "❌ 子目录不存在: $dir"
          return 1
        fi
      else
        rsync -av --delete --exclude='.git' \
          "${exclude_patterns[@]}" \
          "$temp_dir/" "$dest/"
      fi

      echo "✅ 同步完成 [$dest] (已保护 ${#exclude_patterns[@]} 处本地变更)"
      rm -rf "$temp_dir"
    }
    export -f atomic_sync

    # 并行执行同步
    echo "$REPOS" | jq -c '.[]' | parallel -j 4 --halt soon,fail=1 atomic_sync
