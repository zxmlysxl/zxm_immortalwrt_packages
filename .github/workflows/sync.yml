name: Atomic Sync Repos
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    env:
      GIT_RETRIES: 3
      SYNC_TIMEOUT: 600 # 10分钟超时

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Atomic Sync
        run: |
          # 定义仓库列表（JSON格式更易维护）
          REPOS='[
            {"url":"https://github.com/sirpdboy/luci-app-advancedplus.git","dest":"advancedplus","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-theme-kucat.git","dest":"kucat","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-netwizard.git","dest":"netwizard","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-netspeedtest.git","dest":"netspeedtest","branch":"js"},
            {"url":"https://github.com/sirpdboy/luci-app-netdata.git","dest":"netdata","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-timecontrol.git","dest":"timecontrol","branch":"main"},
            {"url":"https://github.com/sirpdboy/luci-app-taskplan.git","dest":"taskplan","branch":"master"},
            {"url":"https://github.com/sirpdboy/luci-app-poweroffdevice.git","dest":"poweroffdevice","branch":"js"},
            {"url":"https://github.com/tty228/luci-app-wechatpush.git","dest":"wechatpush","branch":"master"},
            {"url":"https://github.com/gdy666/luci-app-lucky.git","dest":"lucky","branch":"main"},
            {"url":"https://github.com/linkease/istore.git","dest":"istore","branch":"main"}
          ]'

          # 安装并行处理工具
          sudo apt-get -y install parallel jq

          # 原子同步函数
          atomic_sync() {
            local repo=$1
            local url=$(jq -r '.url' <<< "$repo")
            local dest=$(jq -r '.dest' <<< "$repo")
            local branch=$(jq -r '.branch' <<< "$repo")
            local temp_dir=$(mktemp -d)
            
            echo "🔁 开始同步 $dest (尝试 $GIT_RETRIES 次)"
            
            # 带重试的克隆
            for i in $(seq 1 $GIT_RETRIES); do
              if git clone --depth 1 --branch "$branch" "$url" "$temp_dir" 2>&1; then
                break
              elif [ $i -eq $GIT_RETRIES ]; then
                echo "❌ 克隆失败，尝试默认分支"
                git clone --depth 1 "$url" "$temp_dir" || return 1
                cd "$temp_dir"
                branch=$(git rev-parse --abbrev-ref origin/HEAD | cut -d'/' -f2)
                git checkout "$branch"
                cd -
              else
                sleep $((i * 5))
              fi
            done

            # 原子化文件操作
            mkdir -p "$dest"
            rsync -a --delete --exclude='.git' "$temp_dir/" "$dest/" && \
            echo "✅ $dest 同步成功 (分支: $branch)" || \
            { echo "❌ $dest 文件复制失败"; return 1; }

            rm -rf "$temp_dir"
          }
          export -f atomic_sync

          # 并行同步（限制并发数）
          echo "$REPOS" | jq -c '.[]' | parallel -j 4 --halt soon,fail=1 atomic_sync

      - name: Atomic Commit
        run: |
          # 原子提交函数
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 检查有效变更
          changes=$(git status --porcelain)
          [ -z "$changes" ] && { echo "🟢 无变更需要提交"; exit 0; }

          # 生成变更报告
          echo "📊 变更统计:"
          git diff --stat
          echo "📝 变更详情:"
          git status -v

          # 原子提交
          git add .
          git commit -m "Atomic Sync: $(date +'%Y-%m-%d %H:%M:%S')" || \
          { echo "⚠️ 提交失败，尝试合并冲突"; exit 1; }

      - name: Atomic Push
        run: |
          # 带锁的原子推送
          for i in $(seq 1 5); do
            git fetch origin main
            if git diff --quiet origin/main; then
              echo "🟢 远程无新变更，直接推送"
              git push origin HEAD:main && exit 0
            else
              echo "🔄 检测到远程变更，正在变基..."
              git rebase origin/main && \
              git push origin HEAD:main && exit 0 || \
              { 
                echo "⚠️ 尝试 $i/5 失败";
                git rebase --abort;
                git reset --hard origin/main;
                sleep 10;
              }
            fi
          done
          echo "❌ 推送失败超过最大重试次数"
          exit 1
